
******************************************************************************************************************

This file is for team members to input notes as we work on stuff. Basically just a scribble pad to leave input for each other, 
and to list issues we are currently having.

******************************************************************************************************************

TO DO:

<strike>#1. The code we currently have takes strings as input, which is part of the project requirements. I'm not sure how this is going to work in terms of 
comparisons, since that is how the tree structures itself. Do we need to convert strings to ASCII before making comparisons? Will we need to use 
string:::strncmp() instead of arithmetic operators for each comparison?</strike>




2. Should we use a vectors instead of arrays to hold node values? The input comes from a text file, so we can read those values into a 
vector (dynamically sized) and then feed that vector into the tree. I guess arrays are fine because we know that the keyArr will always be  
<= degree?? 

3. DOT file generation. DOT files can pretty easily be put written to show what a tree looks like after it is generated, but to make that happen dynamically 
(ie. at each step of insertion/deletion/whatever) is pretty complicated and I havent found a lot of exisiting implementation of this. An example of 
something like that here: https://nirav.com.np/2019/12/08/visualize-c-data-structures-using-graphviz-and-dot-language.html
It would  be really cool if we were able to produce a drawing of what is happening in the tree in "real-time", but i'm not sure how we can do that yet without
it being a very large effort.
Any ideas?

******************************************************************************************************************

Project Presentation Layout ideas:

Intro 
  - who we are 
  - what we are presenting
  - why we chose btree (insert nonsense here)

Overview of btree 
  - "m-ary" trees and how b-tree fits into that category
  - how it differs from binary tree
  - short history of btree (year developed, by whom, what university/company)
  - more??

Code presentation
  - 

Practical explanation
  - i think it would be interesting towards the end of the presentation to explain *why* btree looks like it does, ie:
    fat and not tall
  - there is a whole bunch of stuff online about why btree was developed that i havent really looked at yet. I know
    that btree structure was developed specifically for platter drive space management. Something about the trees
    being "wide" instead of "tall" makes it so that there is less random access needed and drives can more efficiently 
    access data. If someone wanted to look into this more closely and put together an easy-to-understand explanation 
    that would be great.
